{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\fighting-game\\\\src\\\\pages\\\\index.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Battle() {\n  const canvas = document.querySelector('canvas');\n  const context = canvas.getContext('2d');\n  canvas.width = 1024;\n  canvas.height = 576;\n  context.fillRect(0, 0, 1024, 576);\n  const gravity = 0.2;\n\n  class Sprite {\n    constructor(_ref) {\n      let {\n        position,\n        velocity\n      } = _ref;\n      this.position = position;\n      this.velocity = velocity;\n      this.height = 150;\n      this.lastKey = \"\";\n    }\n\n    draw() {\n      context.fillStyle = 'red';\n      context.fillRect(this.position.x, this.position.y, 50, this.height);\n    }\n\n    update() {\n      this.draw();\n      this.position.x += this.velocity.x;\n      this.position.y += this.velocity.y;\n\n      if (this.position.y + this.height + this.velocity.y >= canvas.height) {\n        this.velocity.y = 0;\n      } else {\n        this.velocity.y += gravity;\n      }\n    }\n\n  }\n\n  const player = new Sprite({\n    position: {\n      x: 0,\n      y: 0\n    },\n    velocity: {\n      x: 0,\n      y: 0\n    }\n  });\n  const enemy = new Sprite({\n    position: {\n      x: 900,\n      y: 100\n    },\n    velocity: {\n      x: 0,\n      y: 0\n    }\n  });\n  const keys = {\n    a: {\n      pressed: false\n    },\n    d: {\n      pressed: false\n    },\n    ArrowLeft: {\n      pressed: false\n    },\n    ArrowRight: {\n      pressed: false\n    }\n  };\n  let lastKey;\n\n  function animate() {\n    window.requestAnimationFrame(animate);\n    context.fillStyle = 'black';\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    player.update();\n    enemy.update();\n    player.velocity.x = 0;\n\n    if (keys.a.pressed && lastKey === 'a') {\n      player.velocity.x = -1;\n    } else if (keys.d.pressed && lastKey === 'd') {\n      player.velocity.x = 1;\n    } else if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\n      enemy.velocity.x = -1;\n    } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n      enemy.velocity.x = 1;\n    }\n  }\n\n  animate();\n  window.addEventListener('keyup', event => {\n    switch (event.key) {\n      case 'w':\n        player.velocity.y = 0;\n        break;\n\n      case 'd':\n        keys.d.pressed = false;\n        break;\n\n      case 'a':\n        keys.a.pressed = false;\n        break;\n\n      case 'ArrowUp':\n        enemy.velocity.y = 0;\n        break;\n\n      case 'ArrowRight':\n        keys.ArrowRight.pressed = false;\n        break;\n\n      case 'ArrowLeft':\n        keys.ArrowLeft.pressed = false;\n        break;\n\n      default:\n        break;\n    }\n  });\n  window.addEventListener('keydown', event => {\n    switch (event.key) {\n      case 'w':\n        player.velocity.y = -5;\n        break;\n\n      case 'd':\n        keys.d.pressed = true;\n        lastKey = 'd';\n        break;\n\n      case 'a':\n        keys.a.pressed = true;\n        lastKey = 'a';\n        break;\n\n      case 'ArrowUp':\n        enemy.velocity.y = -5;\n        break;\n\n      case 'ArrowRight':\n        keys.ArrowRight.pressed = true;\n        enemy.lastKey = 'ArrowRight';\n        break;\n\n      case 'ArrowLeft':\n        keys.ArrowLeft.pressed = true;\n        enemy.lastKey = 'ArrowLeft';\n        break;\n\n      default:\n        break;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = Battle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Battle\");","map":{"version":3,"sources":["C:/Users/chris/fighting-game/src/pages/index.js"],"names":["React","Battle","canvas","document","querySelector","context","getContext","width","height","fillRect","gravity","Sprite","constructor","position","velocity","lastKey","draw","fillStyle","x","y","update","player","enemy","keys","a","pressed","d","ArrowLeft","ArrowRight","animate","window","requestAnimationFrame","addEventListener","event","key"],"mappings":"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","sourcesContent":["import React from 'react';\r\nexport default function Battle() {\r\n    const canvas = document.querySelector('canvas');\r\n    const context = canvas.getContext('2d');\r\n    canvas.width = 1024;\r\n    canvas.height = 576;\r\n\r\n    context.fillRect(0, 0, 1024, 576);\r\n\r\n    const gravity = 0.2;\r\n\r\n    class Sprite {\r\n        constructor({ position, velocity }) {\r\n            this.position = position;\r\n            this.velocity = velocity;\r\n            this.height = 150;\r\n            this.lastKey = \"\";\r\n        }\r\n\r\n        draw() {\r\n            context.fillStyle = 'red';\r\n            context.fillRect(this.position.x, this.position.y, 50, this.height);\r\n        }\r\n\r\n        update() {\r\n            this.draw();\r\n            this.position.x += this.velocity.x;\r\n            this.position.y += this.velocity.y;\r\n\r\n            if(this.position.y + this.height + this.velocity.y >= canvas.height) {\r\n                this.velocity.y = 0;\r\n            } else {\r\n                this.velocity.y += gravity;\r\n            }\r\n        }\r\n    }\r\n\r\n    const player = new Sprite({\r\n        position: {\r\n            x: 0,\r\n            y: 0\r\n        },\r\n        velocity: {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n    });\r\n\r\n\r\n    const enemy = new Sprite({\r\n        position: {\r\n            x: 900,\r\n            y: 100\r\n        },\r\n        velocity: {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n    });\r\n\r\n    const keys = {\r\n        a: {\r\n            pressed: false\r\n        },\r\n        d: {\r\n            pressed: false\r\n        },\r\n        ArrowLeft: {\r\n            pressed: false\r\n        },\r\n        ArrowRight: {\r\n            pressed: false\r\n        }\r\n    }\r\n\r\n    let lastKey;\r\n\r\n    function animate() {\r\n        window.requestAnimationFrame(animate);\r\n        context.fillStyle = 'black';\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n        player.update();\r\n        enemy.update();\r\n\r\n        player.velocity.x = 0;\r\n\r\n        if(keys.a.pressed && lastKey === 'a') {\r\n            player.velocity.x = -1;\r\n        } else if(keys.d.pressed && lastKey === 'd') {\r\n            player.velocity.x = 1;\r\n        } else if(keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\r\n            enemy.velocity.x = -1;\r\n        } else if(keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\r\n            enemy.velocity.x = 1;\r\n        }\r\n    }\r\n\r\n    animate();\r\n\r\n    window.addEventListener('keyup', (event) => {\r\n        switch(event.key) {\r\n            case 'w': \r\n            player.velocity.y = 0;\r\n            break;\r\n            case 'd': \r\n            keys.d.pressed = false;\r\n            break;\r\n            case 'a': \r\n            keys.a.pressed = false;\r\n            break;\r\n\r\n            case 'ArrowUp': \r\n            enemy.velocity.y = 0\r\n            break;\r\n            case 'ArrowRight': \r\n            keys.ArrowRight.pressed = false;\r\n            break;\r\n            case 'ArrowLeft': \r\n            keys.ArrowLeft.pressed = false;\r\n            break;\r\n            default: \r\n            break;\r\n        }\r\n    })\r\n\r\n    window.addEventListener('keydown', (event) => {\r\n        switch(event.key) {\r\n            case 'w': \r\n            player.velocity.y = -5\r\n            break;\r\n            case 'd': \r\n            keys.d.pressed = true;\r\n            lastKey = 'd';\r\n            break;\r\n            case 'a': \r\n            keys.a.pressed = true;\r\n            lastKey = 'a';\r\n            break;\r\n\r\n            case 'ArrowUp': \r\n            enemy.velocity.y = -5\r\n            break;\r\n            case 'ArrowRight': \r\n            keys.ArrowRight.pressed = true;\r\n            enemy.lastKey = 'ArrowRight';\r\n            break;\r\n            case 'ArrowLeft': \r\n            keys.ArrowLeft.pressed = true;\r\n            enemy.lastKey = 'ArrowLeft';\r\n            break;\r\n            default: \r\n            break;\r\n        }\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <canvas></canvas>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}